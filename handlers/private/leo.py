from aiogram import types
from magic_filter import F

from keyboards.default.user_buttons import tests_main_dkb
from keyboards.inline.user_ibuttons import start_test, leotest_ikb
from loader import dp, db
from utils.all_functions import warning_text
from utils.leo import handle_answer


@dp.message_handler(F.text == "Leongard so'rovnomasi")
async def leo_main_router(message: types.Message):
    await db.delete_leotemp(telegram_id=message.from_user.id)
    await message.answer(
        text="–£—à–±—É —Ç–µ—Å—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∏–Ω–≥ –∞–∫—Ü–µ–Ω—Ç—É–∞—Ü–∏—è—Å–∏–Ω–∏ —û—Ä–≥–∞–Ω—É–≤—á–∏ –°—û—Ä–æ–≤–Ω–æ–º–∞ –±—û–ª–∏–±, —û–∑ –∏—á–∏–≥–∞ 88 —Ç–∞ —Å–∞–≤–æ–ª, 10 —Ç–∞ —à–∫–∞–ª–∞–Ω–∏ "
             "–æ–ª–∞–¥–∏. –ë–∏—Ä–∏–Ω—á–∏ —à–∫–∞–ª–∞ —à–∞—Ö—Å–Ω–∏ —Ö–∞—ë—Ç–∏–π —Ñ–∞–æ–ª–ª–∏–≥–∏–Ω–∏ —û—Ä–≥–∞–Ω—É–≤—á–∏, –∏–∫–∫–∏–Ω—á–∏ —à–∫–∞–ª–∞ —ç—Å–∞ –∞–∫—Ü–µ–Ω—Ç—É–∞—Ü–∏—è–Ω–∏ —Ç–∞—ä—Å–∏—Ä–ª–∞–Ω–∏—à–∏–Ω–∏ "
             "–Ω–∞–º–æ–π–∏—à —ç—Ç–∞–¥–∏. –£—á–∏–Ω—á–∏ —à–∫–∞–ª–∞ —Å–∏–Ω–∞–ª—É–≤—á–∏–Ω–∏–Ω–≥ —ç–º–æ—Ü–∏–æ–Ω–∞–ª —Ö–∞—ë—Ç–∏–Ω–∏–Ω–≥ —á—É“õ—É—Ä–ª–∏–≥–∏–Ω–∏ —Ö–∏—Å–æ–±–ª–∞–Ω–∞–¥–∏. –¢—û—Ä—Ç–∏–Ω—á–∏ —à–∫–∞–ª–∞ "
             "—ç—Å–∞ —Å–∏–Ω–∞–ª—É–≤—á–∏–Ω–∏–Ω–≥ –ø–µ–¥–∞–Ω—Ç–∏–∑–º–≥–∞ –±—û–ª–≥–∞–Ω –º–æ–π–∏–ª–ª–∏–≥–∏–Ω–∏ —û—Ä–≥–∞–Ω—É–≤—á–∏ —Ö–∏—Å–æ–±–ª–∞–Ω–∞–¥–∏.  –ë–µ—à–∏–Ω—á–∏ —à–∫–∞–ª–∞ —é“õ–æ—Ä–∏ "
             "—Ö–∞–≤–æ—Ç–∏—Ä–ª–∏–∫–Ω–∏, –æ–ª—Ç–∏–Ω—á–∏ —à–∫–∞–ª–∞ —ç—Å–∞ –∫–∞–π—Ñ–∏—è—Ç–Ω–∏–Ω–≥ —Å–∞–±–∞–±—Å–∏–∑ –∫—û—Ç–∞—Ä–∏–ª–∏–± —ë–∫–∏ –∞–∫—Å–∏–Ω—á–∞ —Ç—É—à–∏—à–≥–∞ –±—û–ª–≥–∞–Ω –º–æ–π–∏–ª–ª–∏–≥–∏–Ω–∏, "
             "–µ—Ç—Ç–∏–Ω—á–∏ —à–∫–∞–ª–∞ –±—û–ª—Å–∞ —à–∞—Ö—Å–Ω–∏–Ω–≥ –Ω–∞–º–æ–π–∏—à–∫–æ—Ä–æ–Ω–∞ —Ö—É–ª“õ-–∞—Ç–≤–æ—Ä–∏–Ω–∏,  —Å–∞–∫–∫–∏–∑–∏–Ω—á–∏ —à–∫–∞–ª–∞—Å–∏ —ç—Å–∞ —Ç—É—Ä“ì—É–Ω —Ç—É—Ä–º–∞–π–¥–∏–≥–∞–Ω "
             "—Ñ–µ—ä–ª –∞—Ç–≤–æ—Ä,  —Ç—û“õ“õ–∏–∑–∏–Ω—á–∏ —à–∫–∞–ª–∞ —á–∞—Ä—á–æ“õ–ª–∏–∫ –¥–∞—Ä–∞–∂–∞—Å–∏–Ω–∏ –∞–Ω–∏“õ–ª–∞—à, —û–Ω–∏–Ω—á–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª —Ä–µ–∞–∫—Ü–∏—è—Å–∏–Ω–∏–Ω–≥ –∫—É—á–∏ –≤–∞ –∏—Ñ–æ–¥–∞ "
             "–¥–∞—Ä–∞–∂–∞—Å–∏–Ω–∏ –∞–Ω–∏“õ–ª–∞—à–≥–∞ “õ–∞—Ä–∞—Ç–∏–ª–≥–∞–Ω.\n–¢–µ—Å—Ç —Å–∞–≤–æ–ª–ª–∞—Ä–∏–Ω–∏ –µ—á–∏—à–≥–∞ –≤–∞“õ—Ç —á–µ–≥–∞—Ä–∞–ª–∞–Ω–º–∞–≥–∞–Ω.  –ë–∏–∑ –°–∏–∑ —É—á—É–Ω, –°–∏–∑–Ω–∏ "
             "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–Ω–≥–∏–∑–≥–∞ —Ç–µ–≥–∏—à–ª–∏ –±—û–ª–≥–∞–Ω —Ç–∞—Å–¥–∏“õ —Å–∞–≤–æ–ª–ª–∞—Ä–Ω–∏ —Ö–∞–≤–æ–ª–∞ —ç—Ç–∞–º–∏–∑. –ê–≥–∞—Ä –°–∏–∑ —Ç–∞—Å–¥–∏“õ —Å–∞–≤–æ–ª–ª–∞—Ä–≥–∞ —Ä–æ–∑–∏–ª–∏–∫ "
             "–±–µ—Ä—Å–∞–Ω–≥–∏–∑ ¬´“≤–∞¬ª —Ç—É–≥–º–∞—Å–∏–Ω–∏, —Ä–æ–∑–∏–ª–∏–∫ –±–∏–ª–¥–∏—Ä–º–∞—Å–∞–Ω–≥–∏–∑ ¬´–ô—û“õ¬ª —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥. –°–∞–≤–æ–ª–ª–∞—Ä —É—Å—Ç–∏–¥–∞ –∫—û–ø —û–π–ª–∞–Ω–º–∞–Ω–≥ "
             "—á—É–Ω–∫–∏ —Ç—û“ì—Ä–∏ —ë–∫–∏ –Ω–æ—Ç—û“ì—Ä–∏ –∂–∞–≤–æ–±–ª–∞—Ä –º–∞–≤–∂—É–¥ —ç–º–∞—Å.",
        reply_markup=start_test(callback="leoxarakter")
    )


@dp.callback_query_handler(F.data == "leoxarakter")
async def leo_second_router(call: types.CallbackQuery):
    all_questions = await db.select_questions_leo()
    await call.message.edit_text(
        text=f"{warning_text}\n\n{all_questions[0]['question_number']} / {len(all_questions)}\n\n"
             f"{all_questions[0]['question']}",
        reply_markup=leotest_ikb(all_questions[0])
    )


@dp.callback_query_handler(F.data.startswith("leoyes:"))
async def leoyes_callback(call: types.CallbackQuery):
    question_id = int(call.data.split(":")[1])
    await handle_answer(call, question_id, is_yes=True)


@dp.callback_query_handler(F.data.startswith("leono:"))
async def leono_callback(call: types.CallbackQuery):
    question_id = int(call.data.split(":")[1])
    await handle_answer(call, question_id, is_yes=False)


@dp.callback_query_handler(F.data.startswith("leoback"))
async def leoback_callback(call: types.CallbackQuery):
    question_id = int(call.data.split(":")[1])

    if question_id == 0:
        await call.message.delete()
        await call.message.answer(
            text="üßë‚Äçüíª Testlar | So'rovnomalar", reply_markup=tests_main_dkb
        )
    else:
        await db.back_leotemp(telegram_id=call.from_user.id, question_number=question_id)
        all_questions = await db.select_questions_leo()
        await call.message.edit_text(
            text=f"{all_questions[question_id - 1]['question_number']} / {len(all_questions)}"
                 f"\n\n{all_questions[question_id - 1]['question']}",
            reply_markup=leotest_ikb(testdb=all_questions[question_id - 1])
        )

from aiogram import types
from aiogram.dispatcher import FSMContext
from magic_filter import F

from keyboards.default.user_buttons import tests_main_dkb
from keyboards.inline.user_ibuttons import start_test, test_ibuttons
from loader import dp, yxndb
from services.error_service import notify_exception_to_admin
from utils.all_functions import warning_text
from utils.yaxin import calculate_and_send_results


@dp.message_handler(F.text == "–Ø—Ö–∏–Ω –ú–µ–Ω–¥–µ–ª–µ–≤–∏—á —Å—û—Ä–æ–≤–Ω–æ–º–∞—Å–∏", state="*")
async def test_command(message: types.Message):
    await yxndb.delete_user_yaxintemporary(telegram_id=message.from_user.id)
    await message.answer(
        text="–£—à–±—É –∫–ª–∏–Ω–∏–∫ —Å—û—Ä–æ–≤–Ω–æ–º–∞ –Ω–µ–≤—Ä–æ—Ç–∏–∫ “≥–æ–ª–∞—Ç–ª–∞—Ä–Ω–∏–Ω–≥ –∞—Å–æ—Å–∏–π —Å–∏–Ω–¥—Ä–æ–º–ª–∞—Ä–∏–Ω–∏ –∞–Ω–∏“õ–ª–∞—à–≥–∞ —ë—Ä–¥–∞–º –±–µ—Ä–∞–¥–∏. –ö–ª–∏–Ω–∏–∫ —Å—û—Ä–æ–≤–Ω–æ–º–∞ "
             "–Ω–∞—Ç–∏–∂–∞–ª–∞—Ä–∏ “õ—É–π–∏–¥–∞–≥–∏ 6 —Ç–∞ –º–µ–∑–æ–Ω –±—û–π–∏—á–∞ –∞–Ω–∏“õ–ª–∞–Ω–∏–± —Ç–∞“≥–ª–∏–ª “õ–∏–ª–∏–Ω–∞–¥–∏:"
             "\n\n1) –•–∞–≤–æ—Ç–∏—Ä –º–µ–∑–æ–Ω–∏ \n2) –ù–µ–≤—Ä–æ—Ç–∏–∫ –¥–µ–ø—Ä–µ—Å—Å–∏—è –º–µ–∑–æ–Ω–∏ \n3) –ê—Å—Ç–µ–Ω–∏—è –º–µ–∑–æ–Ω–∏ \n4) –ò—Å—Ç–µ—Ä–∏–∫ —Ç–æ–∏—Ñ–∞–¥–∞–≥–∏ –∂–∞–≤–æ–± "
             "–º–µ–∑–æ–Ω–∏ \n5) –û–±—Å–µ—Å—Å–∏–≤ - —Ñ–æ–±–∏–∫ –±—É–∑–∏–ª–∏—à–ª–∞—Ä –º–µ–∑–æ–Ω–∏ \n6) –í–µ–≥–µ—Ç–∞—Ç–∏–≤ –±—É–∑–∏–ª–∏—à–ª–∞—Ä –º–µ–∑–æ–Ω–∏ \n\n–ô—û—Ä–∏“õ–Ω–æ–º–∞:"
             "\n\n–•–æ–∑–∏—Ä–≥–∏ “≥–æ–ª–∞—Ç–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞—Å–≤–∏—Ä–ª–æ–≤—á–∏ 68 —Ç–∞ —Å–∞–≤–æ–ª–ª–∞—Ä —Ç—û–ø–ª–∞–º–∏–≥–∞ “õ—É–π–∏–¥–∞–≥–∏ 5 —Ç–∞ –∂–∞–≤–æ–±–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–± –∂–∞–≤–æ–± "
             "–±–µ—Ä–∏—à–∏–Ω–≥–∏–∑ –ª–æ–∑–∏–º:\n\n‚Ä¢ “≤–µ—á “õ–∞—á–æ–Ω \n‚Ä¢ –ö–∞–º–¥–∞–Ω - –∫–∞–º \n‚Ä¢ –ë–∞—ä–∑–∏–¥–∞ \n‚Ä¢ –¢–µ–∑ - —Ç–µ–∑ \n‚Ä¢ –î–æ–∏–º \n\n–°—û—Ä–æ–≤–Ω–æ–º–∞ "
             "—è–∫—É–Ω–ª–∞–Ω–≥–∞—á “≥–∞—Ä –±–∏—Ä –º–µ–∑–æ–Ω –±—û–π–∏—á–∞ –∫—û—Ä—Å–∞—Ç–∫–∏—á–ª–∞—Ä–∏–Ω–≥–∏–∑ —Ç–∞“õ–¥–∏–º —ç—Ç–∏–ª–∞–¥–∏.",
        reply_markup=start_test(callback="yaxintest")
    )


@dp.callback_query_handler(F.data == "yaxintest", state="*")
async def start_test_yaxin(call: types.CallbackQuery):
    all_questions = await yxndb.select_all_yaxin()
    await call.message.edit_text(
        text=f"{warning_text}\n\n{all_questions[0]['id']} / {len(all_questions)}\n\n{all_questions[0]['question']}",
        reply_markup=test_ibuttons(testdb=all_questions[0])
    )


@dp.callback_query_handler(F.data.startswith("point_"), state="*")
async def test_callback(call: types.CallbackQuery, state: FSMContext):
    column_name, scale_type, question_number = call.data.split(":")
    question_number = int(question_number)

    await call.answer(cache_time=0)

    all_questions = await yxndb.select_all_yaxin()
    scale_parts = scale_type.split("-")

    # Handle multi-scale responses
    for scale in (scale_parts if len(scale_parts) > 1 else [scale_type]):
        point = await yxndb.select_question_scale(scale_type=scale, question_number=question_number)

        await yxndb.add_yaxin_temporary(
            telegram_id=call.from_user.id, scale_type=scale, question_number=question_number,
            test_type="nevroz_yaxin", answer=point[column_name]
        )

    if all_questions[-1]['id'] == question_number:
        await calculate_and_send_results(call=call, state=state)
    else:
        try:
            await call.message.edit_text(
                text=f"{all_questions[question_number]['id']} / {len(all_questions)}"
                     f"\n\n{all_questions[question_number]['question']}",
                reply_markup=test_ibuttons(testdb=all_questions[question_number])
            )
        except Exception as err:
            await call.answer(text=f"Xatolik: {err}", show_alert=True)
            await notify_exception_to_admin(err=err)


@dp.callback_query_handler(F.data.startswith("yaxinback:"), state="*")
async def test_back_callback(call: types.CallbackQuery):
    question_number = int(call.data.split(":")[1])

    if question_number == 0:
        await call.message.delete()
        await call.message.answer(text="üßë‚Äçüíª –¢–µ—Å—Ç–ª–∞—Ä | –°—û—Ä–æ–≤–Ω–æ–º–∞–ª–∞—Ä", reply_markup=tests_main_dkb)
    else:
        await yxndb.back_yaxintemporary(telegram_id=call.from_user.id, question_number=question_number)
        all_questions = await yxndb.select_all_yaxin()
        await call.message.edit_text(
            text=f"{all_questions[question_number - 1]['id']} / {len(all_questions)}"
                 f"\n\n{all_questions[question_number - 1]['question']}",
            reply_markup=test_ibuttons(testdb=all_questions[question_number - 1])
        )
